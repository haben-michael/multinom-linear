% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multinom.linear.R
\name{multinom.linear}
\alias{multinom.linear}
\title{Confidence Interval for a linear function of a multinomial
parameter}
\usage{
multinom.linear(
  p.obs,
  c,
  n,
  theta,
  n.ref.samples = 100,
  test.stat,
  p.sampler,
  theta.resolution = 50,
  p.resolution = NULL,
  ...
)
}
\arguments{
\item{p.obs}{the observed proportions}

\item{c}{the coefficients of the linear combination, assumed nonnegative}

\item{n}{the multinomial count}

\item{theta}{the grid of theta values; if null then theta.resolution evenly spaced will be used}

\item{n.ref.samples}{the number of monte carlo samples for computing the empirical p-values}

\item{test.stat}{routine to compute a test statistic}

\item{p.sampler}{routine returning a set of points in $\\{c^tx=1\\}$}

\item{theta.resolution}{the numer of points theta, default is 50}

\item{p.resolution}{the number of points p at each theta}

\item{...}{additional parameters passed to p.sampler}
}
\value{
an object of class multinom.linear
}
\description{
This routine computes p-values for a hypothesis test at a grid of
points in the intersection of the probability simplex in $R^m$ and
$\\{c^tx=\\theta\\}$. The object it returns, of class multinom.linear,
may be used to obtain confidence intervals for $\\theta=c^t p$,
where $p$ is the vector of multinomial parameters. See the
referenced manuscript for notation and further details on the
algorithm.
}
\details{
test.stat is a function for computing a test statitsic. It must
accept parameters p.obs with the same semantics as p.obs in this
routine, p corresponding to the a null multinomial parameter, i.e.,
a probability, c and n as in this routine. Supplied are:

test.stat.1 : centered and studentized
test.stat.5 : centered and studentized with a regularization term

p.sampler is a routine for computing a set of points in the
intersection of the probability simpler with $\\{c^tx=1\\}$. The only
obligatory parameters are n, corresponding to the number of points,
and c. Supplied are:

p.sampler.1: faster stochastic sampler, non-uniform
p.sampler.2: slower deterministic or stochastic sampler, using vertex enumeration
}
\examples{
## first put the airpollution data in a convenient format: n rows and
## m columns of 0s and 1s
airpollution.split <- split(bild::airpollution,bild::airpollution$id)
wheeze <- lapply(airpollution.split, function(df)
    do.call(rbind,rep(list(df$wheeze),unique(df$counts))))
wheeze <- do.call(rbind,wheeze)
## call multinom.linear to carry out the main computations
alpha <- .05
m <- ncol(wheeze)
c <- (0:m)/m
counts <- rowSums(wheeze)
x <- sapply(0:m, function(i)sum(counts==i))
n <- sum(x)
test.stat <- function(p.obs,p,c)test.stat.5(p.obs,p,c,n,lambda=.05)
ml <- multinom.linear(p.obs=x/n,c=c,n=n,theta=NULL,n.ref.samples=1e2,test.stat=test.stat,p.sampler=p.sampler.1,theta.resolution=200,p.resolution=20)
## print the confidence interval
confint(ml)
## plot the p-values used to generate the confidence interval
plot(ml)
}
